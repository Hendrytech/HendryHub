import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // generated by flutterfire configure

// Screens
import 'screens/home_screen.dart';
import 'screens/video_list_screen.dart';
import 'screens/chat_screen.dart';
import 'screens/settings_screen.dart';
import 'screens/splash_screen.dart'; // âœ… splash

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // your existing prefs/theme logic after this
  final prefs = await SharedPreferences.getInstance();
  final isDark = prefs.getBool('isDarkTheme') ?? false;
  runApp(HendryApp(initialDarkTheme: isDark));
}

class HendryApp extends StatefulWidget {
  final bool initialDarkTheme;
  const HendryApp({super.key, required this.initialDarkTheme});

  @override
  State<HendryApp> createState() => _HendryAppState();
}

class _HendryAppState extends State<HendryApp> {
  late bool _isDark;

  @override
  void initState() {
    super.initState();
    _isDark = widget.initialDarkTheme;
  }

  Future<void> _toggleTheme(bool isDark) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('isDarkTheme', isDark);
    setState(() => _isDark = isDark); // ðŸ”¥ rebuilds whole MaterialApp
  }

  @override
  Widget build(BuildContext context) {
    final theme = ThemeData(
      brightness: _isDark ? Brightness.dark : Brightness.light,
      scaffoldBackgroundColor: _isDark ? const Color(0xFF111418) : Colors.white,
      colorScheme:
          (_isDark ? const ColorScheme.dark() : const ColorScheme.light())
              .copyWith(
                primary: Colors.deepPurple,
                secondary: Colors.deepPurpleAccent,
              ),
      appBarTheme: AppBarTheme(
        backgroundColor: _isDark ? const Color(0xFF111418) : Colors.deepPurple,
        foregroundColor: Colors.white,
        elevation: 0,
      ),
      snackBarTheme: const SnackBarThemeData(
        behavior: SnackBarBehavior.floating,
      ),
      useMaterial3: true,
    );

    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'HendryHub',
      theme: theme,
      home: SplashScreen(
        // âœ… direct widget instead of route string
        onFinish: () {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (_) =>
                  RootShell(isDark: _isDark, onToggleTheme: _toggleTheme),
            ),
          );
        },
      ),
    );
  }
}

/// RootShell = the bottom bar navigation container
class RootShell extends StatefulWidget {
  final bool isDark;
  final ValueChanged<bool> onToggleTheme;

  const RootShell({
    super.key,
    required this.isDark,
    required this.onToggleTheme,
  });

  @override
  State<RootShell> createState() => _RootShellState();
}

class _RootShellState extends State<RootShell> {
  int _current = 0;

  @override
  void initState() {
    super.initState();
    _restoreLastTab();
  }

  Future<void> _restoreLastTab() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() => _current = prefs.getInt('last_tab') ?? 0);
  }

  Future<void> _saveTab(int i) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('last_tab', i);
  }

  void _goToTab(int i) {
    if (_current == i) return;
    setState(() => _current = i);
    _saveTab(i);
  }

  @override
  Widget build(BuildContext context) {
    final pages = <Widget>[
      HomeScreen(
        onToggleTheme: widget.onToggleTheme,
        onOpenAiTab: () => _goToTab(2),
      ),
      const VideoListScreen(),
      const ChatScreen(),
      SettingsScreen(onToggleTheme: widget.onToggleTheme),
    ];

    return Scaffold(
      body: IndexedStack(index: _current, children: pages),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _current,
        onTap: _goToTab,
        type: BottomNavigationBarType.fixed,
        backgroundColor: widget.isDark ? const Color(0xFF1B2127) : Colors.white,
        selectedItemColor: widget.isDark ? Colors.white : Colors.deepPurple,
        unselectedItemColor: widget.isDark
            ? const Color(0xFF9CAAAB)
            : Colors.black54,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.home_rounded),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.video_library_rounded),
            label: 'Videos',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.smart_toy_rounded),
            label: 'AI',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings_rounded),
            label: 'Settings',
          ),
        ],
      ),
    );
  }
}
